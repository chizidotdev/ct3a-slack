import type { GetServerSideProps, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import Channels from "@components/Channels";
import Teams from "@components/Teams";
import Messages from "@components/Messages";
import Input from "@components/Input";
import { getServerAuthSession } from "src/server/common/get-server-auth-session";
import { Session } from "next-auth";
import { signOut } from "next-auth/react";
import { useState } from "react";
import { trpc } from "src/utils/trpc";

export default function Home({
  session,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const [activeTeamId, setActiveTeamId] = useState("");
  const { data: teams } = trpc.team.getAll.useQuery(undefined, {
    onSuccess(data) {
      if (data[0] !== undefined) setActiveTeamId(data[0].id);
    },
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="grid h-screen grid-cols-[4rem_16rem_1fr]">
        <Teams teams={teams || []} setId={setActiveTeamId} />
        <Channels id={activeTeamId} session={session} />

        <section className="grid grid-rows-[3.5rem_1fr_4rem]">
          <div className="col-span-3">
            Header
            <button
              className="ml-10 rounded-lg border p-2"
              onClick={() => signOut()}
            >
              Logout
            </button>
          </div>

          <Messages />

          <Input />
        </section>
        {/* <AuthShowcase /> */}
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<{
  session: Session;
}> = async (context) => {
  const session = await getServerAuthSession(context);

  if (!session)
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };

  return {
    props: { session },
  };
};
