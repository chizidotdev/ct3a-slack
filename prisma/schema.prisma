// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  accounts      Account[]
  sessions      Session[]
  teams         Team[]
  messages      Message[]
  teams_owned   Team[]    @relation(name: "owner")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Channel {
  id       String    @id @default(cuid())
  name     String
  public   Boolean   @default(true)
  teamId   String
  team     Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Team {
  id       String    @id @default(cuid())
  name     String    @unique
  userId   String
  owner    User      @relation(name: "owner", fields: [userId], references: [id], onDelete: Cascade)
  users    User[]
  channels Channel[]
}

model Message {
  id        String  @id @default(cuid())
  text      String  @db.Text
  userId    String
  channelId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
